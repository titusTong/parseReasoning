var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{A:()=>r});const n=["think","reason","reasoning","thought"],r=e=>{try{const t=[],r=new RegExp(`<(${n.join("|")})>`,"i"),o=new RegExp(`</(${n.join("|")})>`,"i");let i=0,s=!1;for(;i<e.length;){const n=e.slice(i).match(r),c=e.slice(i).match(o);if(s||!n){if(s&&c){const n=e.slice(i,i+c.index);n.trim()&&t.push({type:"reasoning",content:n.trim()}),s=!1,i+=c.index+c[0].length}else if(i<e.length){const n=e.slice(i);t.push({type:s?"reasoning":"text",content:n.trim(),reasoning_running:s});break}}else{const r=e.slice(i,i+n.index);r.trim()&&t.push({type:"text",content:r.trim()}),s=!0,i+=n.index+n[0].length}}return t}catch(t){return console.error(`Error parsing reasoning: ${t}`),[{type:"text",content:e}]}};var o=t.A;export{o as default};